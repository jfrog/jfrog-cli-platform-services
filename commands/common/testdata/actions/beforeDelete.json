{
  "action": {
    "application": "artifactory",
    "name": "BEFORE_DELETE"
  },
  "description": "Before Delete events are triggered before Artifactory deletes an artifact. For example, you can prevent the deletion of an artifact based on specific conditions.",
  "samplePayload": "{\"metadata\":{\"repoPath\":{\"key\":\"local-repo\",\"path\":\"folder/subfolder/my-file\",\"id\":\"local-repo:folder/subfolder/my-file\",\"isRoot\":false,\"isFolder\":false},\"repoType\":1,\"triggerMetadataCalculation\":false,\"allowAsyncDelete\":false,\"skipTrashcan\":false,\"isTriggeredByGc\":false,\"triggeredByMove\":false},\"userContext\":{\"id\":\"id\",\"isToken\":false,\"realm\":\"realm\"},\"itemInfo\":{\"repoPath\":{\"key\":\"local-repo\",\"path\":\"folder/subfolder/my-file\",\"id\":\"local-repo:folder/subfolder/my-file\",\"isRoot\":false,\"isFolder\":false},\"name\":\"my-artifact\",\"created\":1,\"lastModified\":0}}",
  "sampleCode": "\nexport default async (context: PlatformContext, data: BeforeDeleteRequest): Promise<BeforeDeleteResponse> => {\n    let status: BeforeDeleteStatus = BeforeDeleteStatus.BEFORE_DELETE_UNSPECIFIED;\n\n    try {\n        // The in-browser HTTP client facilitates making calls to the JFrog REST APIs\n        //To call an external endpoint, use 'await context.clients.axios.get(\"https://foo.com\")'\n        const res = await context.clients.platformHttp.get('/artifactory/api/v1/system/readiness');\n\n        // You should reach this part if the HTTP request status is successful (HTTP Status 399 or lower)\n        if (res.status === 200) {\n            status = BeforeDeleteStatus.BEFORE_DELETE_PROCEED;\n            console.log(\"Artifactory ping success\");\n        } else {\n            status = BeforeDeleteStatus.BEFORE_DELETE_WARN;\n            console.warn(`Request is successful but returned status other than 200. Status code : ${res.status}`);\n        }\n    } catch(error) {\n        // The platformHttp client throws PlatformHttpClientError if the HTTP request status is 400 or higher\n        status = BeforeDeleteStatus.BEFORE_DELETE_STOP;\n        console.error(`Request failed with status code ${error.status || '<none>'} caused by : ${error.message}`)\n    }\n\n    return {\n        message: \"proceed\",\n        status\n    }\n}\n",
  "typesDefinitions": "\ninterface BeforeDeleteRequest {\n    metadata: DeleteMetadata | undefined;\n    userContext: UserContext | undefined;\n    itemInfo: ItemInfo | undefined;\n}\n\ninterface DeleteMetadata {\n    /** The repoPath object of the request */\n    repoPath: RepoPath | undefined;\n    /** Repository type */\n    repoType: RepoType;\n    /** Is it a request that trigger metadata calculation */\n    triggerMetadataCalculation: boolean;\n    /** Is the async delete operation allowed */\n    allowAsyncDelete: boolean;\n    /** Is the trash can skipped */\n    skipTrashcan: boolean;\n    /** Is the delete triggered by GC */\n    isTriggeredByGc: boolean;\n    /** Is the delete triggered by move operation */\n    triggeredByMove: boolean;\n}\n\ninterface RepoPath {\n    /** The repo key */\n    key: string;\n    /** The path itself */\n    path: string;\n    /** The key:path combination */\n    id: string;\n    /** Is the path the root */\n    isRoot: boolean;\n    /** Is the path a folder */\n    isFolder: boolean;\n}\n\ninterface UserContext {\n    /** The username or subject */\n    id: string;\n    /** Is the context an accessToken */\n    isToken: boolean;\n    /** The realm of the user */\n    realm: string;\n}\n\ninterface ItemInfo {\n    /** The repoPath object of the request */\n    repoPath: RepoPath;\n    /** Name of the Artifact **/\n    name: string;\n    /** Time of creation of the artifact **/\n    created: number;\n    /** Last modification time that occurred */\n    lastModified: number;\n}\n\ninterface BeforeDeleteResponse {\n    /** The instruction of how to proceed */\n    status: BeforeDeleteStatus;\n    /** Message to print to the log, in case of an error it will be printed as a warning */\n    message: string;\n}\n\nenum BeforeDeleteStatus {\n    BEFORE_DELETE_UNSPECIFIED = 0,\n    BEFORE_DELETE_PROCEED = 1,\n    BEFORE_DELETE_STOP = 2,\n    BEFORE_DELETE_WARN = 3,\n    UNRECOGNIZED = -1,\n}\n\nenum RepoType {\n    REPO_TYPE_UNSPECIFIED = 0,\n    REPO_TYPE_LOCAL = 1,\n    REPO_TYPE_REMOTE = 2,\n    REPO_TYPE_FEDERATED = 3,\n    UNRECOGNIZED = -1,\n}\n",
  "supportProjects": true,
  "filterType": "FILTER_REPO",
  "mandatoryFilter": true,
  "wikiUrl": "https://jfrog.com/help/r/jfrog-platform-administration-documentation/create-a-before-delete-worker",
  "executionRequestType": "BeforeDeleteRequest"
}