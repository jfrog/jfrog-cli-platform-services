{
  "action": {
    "application": "artifactory",
    "name": "BEFORE_REMOTE_INFO"
  },
  "description": "Before Remote Info events are performed before Artifactory performs a remote info",
  "samplePayload": "{\"metadata\":{\"repoPath\":{\"key\":\"local-repo\",\"path\":\"folder/subfolder/my-file\",\"id\":\"local-repo:folder/subfolder/my-file\",\"isRoot\":false,\"isFolder\":false},\"originalRepoPath\":{\"key\":\"local-repo\",\"path\":\"old/folder/subfolder/my-file\",\"id\":\"local-repo:old/folder/subfolder/my-file\",\"isRoot\":false,\"isFolder\":false},\"name\":\"my-file\",\"headOnly\":false,\"checksum\":false,\"recursive\":false,\"modificationTime\":0,\"directoryRequest\":false,\"metadata\":false,\"lastModified\":1,\"ifModifiedSince\":0,\"servletContextUrl\":\"https://jpd.jfrog.io/artifactory\",\"uri\":\"/artifactory/local-repo/folder/subfolder/my-file\",\"clientAddress\":\"100.100.100.100\",\"zipResourcePath\":\"\",\"zipResourceRequest\":false,\"replaceHeadRequestWithGet\":false,\"repoType\":1},\"userContext\":{\"id\":\"jffe@00xxxxxxxxxxxxxxxxxxxxxxxx/users/bob\",\"isToken\":true,\"realm\":\"realm\"},\"headers\":{\"Content-Type\":{\"value\":[\"text/plain\"]},\"Accept\":{\"value\":[\"application/json\"]}}}",
  "sampleCode": "\nexport default async (context: PlatformContext, data: BeforeRemoteInfoRequest): Promise<BeforeRemoteInfoResponse> => {\n    let status: ActionStatus = ActionStatus.UNSPECIFIED;\n    let requestHeaders: { [key: string]: Header } = {};\n\n    try {\n        // The in-browser HTTP client facilitates making calls to the JFrog REST APIs\n        //To call an external endpoint, use 'await context.clients.axios.get(\"https://foo.com\")'\n        const res = await context.clients.platformHttp.get('/artifactory/api/v1/system/readiness');\n\n        // You should reach this part if the HTTP request status is successful (HTTP Status 399 or lower)\n        if (res.status === 200) {\n            status = ActionStatus.PROCEED;\n            requestHeaders['Content-Type'] = { value: ['text/plain'] };\n            console.log(\"Artifactory ping success\");\n        } else {\n            status = ActionStatus.WARN;\n            console.warn(`Request is successful but returned status other than 200. Status code : ${res.status}`);\n        }\n    } catch(error) {\n        // The platformHttp client throws PlatformHttpClientError if the HTTP request status is 400 or higher\n        status = ActionStatus.STOP;\n        console.error(`Request failed with status code ${error.status || '<none>'} caused by : ${error.message}`)\n    }\n\n    return {\n        message: \"proceed\",\n        status,\n        requestHeaders,\n    }\n}\n",
  "typesDefinitions": "\ninterface BeforeRemoteInfoRequest {\n    metadata: DownloadMetadata;\n    userContext: UserContext;\n    headers: { [key: string]: Header };\n}\n\ninterface BeforeRemoteInfoResponse {\n    status: ActionStatus;\n    message: string;\n    executionStatus?: Status;\n    requestHeaders: { [key: string]: Header };\n}\n\ninterface DownloadMetadata {\n    /** The repoPath object of the request */\n    repoPath:\n            | RepoPath\n            | undefined;\n    /** The original repo path in case a virtual repo is involved */\n    originalRepoPath:\n            | RepoPath\n            | undefined;\n    /** The file name from path */\n    name: string;\n    /** Is it a head request */\n    headOnly: boolean;\n    /** Is it a checksum request */\n    checksum: boolean;\n    /** Is it a recursive request */\n    recursive: boolean;\n    /** When a modification has occurred */\n    modificationTime: number;\n    /** Is it a directory request */\n    directoryRequest: boolean;\n    /** Is it a metadata request */\n    metadata: boolean;\n    /** Last modification time that occurred */\n    lastModified: number;\n    /** If a modification happened since the last modification time */\n    ifModifiedSince: number;\n    /** The url that points to artifactory */\n    servletContextUrl: string;\n    /** The request URI */\n    uri: string;\n    /** The client address */\n    clientAddress: string;\n    /** The resource path of the requested zip */\n    zipResourcePath: string;\n    /** Is the request a zip resource request */\n    zipResourceRequest: boolean;\n    /** should replace the head request with get */\n    replaceHeadRequestWithGet: boolean;\n    /** Repository type */\n    repoType: RepoType;\n}\n\ninterface RepoPath {\n    /** The repo key */\n    key: string;\n    /** The path itself */\n    path: string;\n    /** The key:path combination */\n    id: string;\n    /** Is the path the root */\n    isRoot: boolean;\n    /** Is the path a folder */\n    isFolder: boolean;\n}\n\ninterface Header {\n    value: string[];\n}\n\ninterface UserContext {\n    /** The username or subject */\n    id: string;\n    /** Is the context an accessToken */\n    isToken: boolean;\n    /** The realm of the user */\n    realm: string;\n}\n\nenum RepoType {\n    REPO_TYPE_UNSPECIFIED = 0,\n    REPO_TYPE_LOCAL = 1,\n    REPO_TYPE_REMOTE = 2,\n    REPO_TYPE_FEDERATED = 3,\n    UNRECOGNIZED = -1,\n}\n\nenum ActionStatus {\n    UNSPECIFIED = 0,\n    PROCEED = 1,\n    STOP = 2,\n    WARN = 3,\n    UNRECOGNIZED = -1,\n}\n",
  "supportProjects": true,
  "filterType": "FILTER_REPO",
  "mandatoryFilter": true,
  "wikiUrl": "https://jfrog.com/help/r/jfrog-platform-administration-documentation/create-a-before-remote-info-worker",
  "executionRequestType": "BeforeRemoteInfoRequest"
}