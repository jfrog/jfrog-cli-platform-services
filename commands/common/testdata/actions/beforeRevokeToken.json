{
  "action": {
    "application": "access",
    "name": "BEFORE_REVOKE_TOKEN"
  },
  "description": "Before Revoke Token events are triggered before a token is revoked in the Access service.",
  "samplePayload": "{\"token\":{\"id\":\"id\",\"subject\":\"user\",\"owner\":\"jfwks@000\",\"scope\":\"applied-permissions/user\",\"audience\":\"*@*\",\"expirationTime\":1717171717,\"created\":1717161717,\"type\":\"generic\",\"username\":\"username\",\"description\":\"description\",\"projectKey\":\"projectKey\"},\"userContext\":{\"id\":\"id\",\"isToken\":false,\"realm\":\"realm\"}}",
  "sampleCode": "\nexport default async (context: PlatformContext, data: BeforeRevokeTokenRequest): Promise<BeforeRevokeTokenResponse> => {\n\n    let status: RevokeTokenStatus = RevokeTokenStatus.REVOKE_TOKEN_PROCEED;\n    let message = 'Overwritten by worker-service if an error occurs.';\n\n    if (data.token.description?.startsWith('protected')) {\n        console.log(`Token description starts with 'protected'. Checking if it is the last protected token.`);\n        try {\n            // The in-browser HTTP client facilitates making calls to the JFrog REST APIs\n            //To call an external endpoint, use 'await context.clients.axios.get(\"https://foo.com\")'\n            const res = await context.clients.platformHttp.get('/access/api/v1/tokens?description=protected*');\n\n            // You should reach this part if the HTTP request status is successful (HTTP Status 399 or lower)\n            if (res.status === 200) {\n                const protectedTokensCount = res.data.tokens?.length;\n                console.log(`Number of protected tokens: ${protectedTokensCount}`);\n                // If request includes multiple tokens to revoke, worker code will be executed for each token\n                // In such case the last protected token may be revoked\n                if (protectedTokensCount <= 1) {\n                    status = RevokeTokenStatus.REVOKE_TOKEN_STOP;\n                    message = 'Revocation of the last protected token is not allowed';\n                    console.warn(message);\n                }\n            } else {\n                status = RevokeTokenStatus.REVOKE_TOKEN_WARN;\n                console.warn(`Request is successful but returned status other than 200. Status code : ${res.status}`);\n            }\n        } catch(error) {\n            // The platformHttp client throws PlatformHttpClientError if the HTTP request status is 400 or higher\n            status = RevokeTokenStatus.REVOKE_TOKEN_STOP;\n            console.error(`Request failed with status code ${error.status || '<none>'} caused by : ${error.message}`);\n        }\n    }\n\n    return {\n        status,\n        message,\n    }\n};\n",
  "typesDefinitions": "\ninterface BeforeRevokeTokenRequest {\n    /** The token to revoke */\n    token:\n            | Token\n            | undefined;\n    /** The user context which sends the request */\n    userContext:\n            | UserContext\n            | undefined;\n}\n\ninterface Token {\n    /** The token id to revoke */\n    id: string\n    /** The subject the token belongs to */\n    subject: string;\n    /** The owner of the token */\n    owner: string;\n    /** The scope of the token*/\n    scope: string;\n    /** The audience (i.e. services) this token is aimed for. These services are expected to accept this token */\n    audience: string;\n    /** The time (epoch) this token expires (optional if it has no expiration time) */\n    expirationTime: number;\n    /** The time (epoch) this token was created */\n    created: number;\n    /** Token type. Could be session or generic */\n    type: string;\n    /** Optional username derived from the token subject */\n    username: string;\n    /** Optional free text describing the token */\n    description: string;\n    /** The project key associated with the token */\n    projectKey: string;\n}\n\ninterface UserContext {\n    /** The username or subject */\n    id: string;\n    /** Is the context an accessToken */\n    isToken: boolean;\n    /** The realm of the user */\n    realm: string;\n}\n\n\ninterface BeforeRevokeTokenResponse {\n    /** The instruction of how to proceed */\n    status: RevokeTokenStatus;\n    /** Message to print to the log, in case of an error it will be printed as a warning */\n    message: string;\n}\n\nenum RevokeTokenStatus {\n    REVOKE_TOKEN_UNSPECIFIED = 0,\n    REVOKE_TOKEN_PROCEED = 1,\n    REVOKE_TOKEN_STOP = 2,\n    REVOKE_TOKEN_WARN = 3,\n    UNRECOGNIZED = -1,\n}\n",
  "wikiUrl": "https://jfrog.com/help/r/jfrog-platform-administration-documentation/create-a-before-revoke-token-worker",
  "executionRequestType": "BeforeRevokeTokenRequest"
}