{
  "action": {
    "application": "artifactory",
    "name": "BEFORE_MOVE"
  },
  "description": "Before Move events are triggered before Artifactory moves an artifact. For example, you can prevent the move of an artifact based on specific conditions.",
  "samplePayload": "{\"metadata\":{\"repoPath\":{\"key\":\"local-repo\",\"path\":\"folder/subfolder/my-file\",\"id\":\"local-repo:folder/subfolder/my-file\",\"isRoot\":false,\"isFolder\":false},\"contentLength\":100,\"lastModified\":0,\"trustServerChecksums\":false,\"servletContextUrl\":\"https://jpd.jfrog.io/artifactory\",\"skipJarIndexing\":false,\"disableRedirect\":false,\"repoType\":1},\"targetRepoPath\":{\"key\":\"target-repo\",\"path\":\"new_folder/my-file\",\"id\":\"target-repo:new_folder/my-file\",\"isRoot\":false,\"isFolder\":false},\"properties\":{\"prop1\":{\"value\":[\"value1\",\"value2\"]},\"size\":{\"value\":\"50Gb\"},\"shaResolution\":{\"value\":\"sha256\"}},\"userContext\":{\"id\":\"id\",\"isToken\":false,\"realm\":\"realm\"}}",
  "sampleCode": "\nexport default async (context: PlatformContext, data: BeforeMoveRequest): Promise<BeforeMoveResponse> => {\n    let status: ActionStatus = ActionStatus.UNSPECIFIED;\n    try {\n        // The in-browser HTTP client facilitates making calls to the JFrog REST APIs\n        //To call an external endpoint, use 'await context.clients.axios.get(\"https://foo.com\")'\n        const res = await context.clients.platformHttp.get(\"/artifactory/api/v1/system/readiness\");\n\n        // You should reach this part if the HTTP request status is successful (HTTP Status 399 or lower)\n        if (res.status === 200) {\n            status = ActionStatus.PROCEED;\n            console.log(\"Artifactory ping success\");\n        } else {\n            status = ActionStatus.WARN;\n            console.warn(`Request was successful and returned status code : ${res.status}`);\n        }\n    } catch (error) {\n        status = ActionStatus.STOP;\n        // The platformHttp client throws PlatformHttpClientError if the HTTP request status is 400 or higher\n        console.error(`Request failed with status code ${error.status || \"<none>\"} caused by : ${error.message}`);\n    }\n\n    return {\n        message: \"proceed\",\n        status\n    };\n};\n\n",
  "typesDefinitions": "\ninterface BeforeMoveRequest {\n    /** Various immutable upload metadata */\n    metadata: UploadMetadata | undefined;\n    /** The immutable target repository path */\n    targetRepoPath: RepoPath | undefined;\n    /** The user context which sends the request */\n    userContext: UserContext | undefined;\n    /** The moved artifacts properties */\n    properties: { [key: string]: ArtifactProperties };\n}\n\n\ninterface UploadMetadata {\n    /** The repoPath object of the request */\n    repoPath: RepoPath | undefined;\n    /** The deploy request content length */\n    contentLength: number;\n    /** Last modification time that occurred */\n    lastModified: number;\n    /** Is the request trusting the server checksums */\n    trustServerChecksums: boolean;\n    /** The url that points to artifactory */\n    servletContextUrl: string;\n    /** Is it a request that skips jar indexing */\n    skipJarIndexing: boolean;\n    /** Is redirect disabled on this request */\n    disableRedirect: boolean;\n    /** Repository type */\n    repoType: RepoType;\n}\n\ninterface BeforeMoveResponse {\n    /** Message to print to the log, in case of an error it will be printed as a warning */\n    message: string;\n    /** The instruction of how to proceed */\n    status: ActionStatus;\n}\n\ninterface RepoPath {\n    /** The repo key */\n    key: string;\n    /** The path itself */\n    path: string;\n    /** The key:path combination */\n    id: string;\n    /** Is the path the root */\n    isRoot: boolean;\n    /** Is the path a folder */\n    isFolder: boolean;\n}\n\ninterface UserContext {\n    /** The username or subject */\n    id: string;\n    /** Is the context an accessToken */\n    isToken: boolean;\n    /** The realm of the user */\n    realm: string;\n}\n\ninterface ArtifactProperties {\n    /** The property values */\n    value: string[];\n}\n\nenum RepoType {\n    REPO_TYPE_UNSPECIFIED = 0,\n    REPO_TYPE_LOCAL = 1,\n    REPO_TYPE_REMOTE = 2,\n    REPO_TYPE_FEDERATED = 3,\n    UNRECOGNIZED = -1,\n}\n\nenum ActionStatus {\n    UNSPECIFIED = 0,\n    PROCEED = 1,\n    STOP = 2,\n    WARN = 3,\n}\n",
  "supportProjects": true,
  "filterType": "FILTER_REPO",
  "mandatoryFilter": true,
  "wikiUrl": "https://jfrog.com/help/r/jfrog-platform-administration-documentation/create-a-before-move-worker",
  "executionRequestType": "BeforeMoveRequest"
}