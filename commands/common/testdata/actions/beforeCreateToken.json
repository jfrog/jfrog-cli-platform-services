{
  "action": {
    "application": "access",
    "name": "BEFORE_CREATE_TOKEN"
  },
  "description": "Before Create Token events are triggered before a token is created in the Access service.",
  "samplePayload": "{\"tokenSpec\":{\"subject\":\"user\",\"owner\":\"jfwks@000\",\"scope\":[\"applied-permissions/user\"],\"audience\":[\"*@*\"],\"expiresIn\":3600,\"refreshable\":false,\"extension\":\"extension\",\"description\":\"description\",\"includeReferenceToken\":true},\"userContext\":{\"id\":\"id\",\"isToken\":false,\"realm\":\"realm\"}}",
  "sampleCode": "\nexport default async (context: PlatformContext, data: BeforeCreateTokenRequest): Promise<BeforeCreateTokenResponse> => {\n\n    let status: CreateTokenStatus = CreateTokenStatus.CREATE_TOKEN_UNSPECIFIED;\n    let message = 'Overwritten by worker-service if an error occurs.';\n\n    try {\n        // The in-browser HTTP client facilitates making calls to the JFrog REST APIs\n        //To call an external endpoint, use 'await context.clients.axios.get(\"https://foo.com\")'\n        const res = await context.clients.platformHttp.get('/access/api/v1/config/token/default_expiry');\n\n        // You should reach this part if the HTTP request status is successful (HTTP Status 399 or lower)\n        if (res.status === 200) {\n            const defaultExpiry = res.data.default_token_expiration;\n            const tokenExpiry = data.tokenSpec.expiresIn;\n            console.log(`Got default token expiry ${defaultExpiry}`);\n            if (data.tokenSpec.scope.includes('applied-permissions/admin')\n                    && defaultExpiry > 0\n                    && (!tokenExpiry || (tokenExpiry > defaultExpiry))) {\n                status = CreateTokenStatus.CREATE_TOKEN_STOP;\n                message = 'Admin token generation with expiry greater that default expiry is not allowed';\n            } else {\n                status = CreateTokenStatus.CREATE_TOKEN_PROCEED;\n            }\n        } else {\n            status = CreateTokenStatus.CREATE_TOKEN_WARN;\n            console.warn(`Request is successful but returned status other than 200. Status code : ${res.status}`);\n        }\n    } catch(error) {\n        // The platformHttp client throws PlatformHttpClientError if the HTTP request status is 400 or higher\n        status = CreateTokenStatus.CREATE_TOKEN_STOP;\n        console.error(`Request failed with status code ${error.status || '<none>'} caused by : ${error.message}`);\n    }\n\n    return {\n        status,\n        message,\n    }\n};\n",
  "typesDefinitions": "\ninterface BeforeCreateTokenRequest {\n    /** The spec of the token to create */\n    tokenSpec:\n            | TokenSpec\n            | undefined;\n    /** The user context which sends the request */\n    userContext:\n            | UserContext\n            | undefined;\n}\n\ninterface TokenSpec {\n    /** The subject the token belongs to */\n    subject: string;\n    /** The owner of the token */\n    owner: string;\n    /** A list of application specific scopes to grant the user in the generated token */\n    scope: string[];\n    /** The audience (i.e. services) this token is aimed for. These services are expected to accept this token. */\n    audience: string[];\n    /** Specific expiry in seconds - i.e. for how long the token should be accepted */\n    expiresIn: number;\n    /** Set whether the generated token also has a refresh token. */\n    refreshable: boolean;\n    /** Optional payload to put in the token */\n    extension: string;\n    /** Optional free text to put in the token */\n    description: string;\n    /** Set whether the generated token also has a reference token. */\n    includeReferenceToken: boolean;\n}\n\ninterface UserContext {\n    /** The username or subject */\n    id: string;\n    /** Is the context an accessToken */\n    isToken: boolean;\n    /** The realm of the user */\n    realm: string;\n}\n\ninterface BeforeCreateTokenResponse {\n    /** The instruction of how to proceed */\n    status: CreateTokenStatus;\n    /** Message to print to the log, in case of an error it will be printed as a warning */\n    message: string;\n}\n\nenum CreateTokenStatus {\n    CREATE_TOKEN_UNSPECIFIED = 0,\n    CREATE_TOKEN_PROCEED = 1,\n    CREATE_TOKEN_STOP = 2,\n    CREATE_TOKEN_WARN = 3,\n    UNRECOGNIZED = -1,\n}\n",
  "wikiUrl": "https://jfrog.com/help/r/jfrog-platform-administration-documentation/create-a-before-create-token-worker",
  "executionRequestType": "BeforeCreateTokenRequest"
}