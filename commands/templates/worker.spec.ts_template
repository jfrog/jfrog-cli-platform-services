import { PlatformContext, PlatformClients, PlatformHttpClient } from 'jfrog-workers';
{{- if .HasRequestType}}
import { {{ .ExecutionRequestType }} } from './types';
{{- end }}
import { createMock, DeepMocked } from '@golevelup/ts-jest';
import runWorker from './worker';

describe("{{.WorkerName}} tests", () => {
    let context: DeepMocked<PlatformContext>;
    {{- if .HasRequestType }}
    let request: DeepMocked<{{ .ExecutionRequestType }}>;
    {{- else }}
    let request: any;
    {{- end }}

    beforeEach(() => {
        context = createMock<PlatformContext>({
            clients: createMock<PlatformClients>({
                platformHttp: createMock<PlatformHttpClient>({
                    get: jest.fn().mockResolvedValue({ status: 200 })
                })
            })
        });
        {{- if .HasRequestType }}
        request = createMock<{{ .ExecutionRequestType }}>();
        {{- else }}
        request = {};
        {{- end }}
    })

    it('should run', async () => {
        await expect(runWorker(context, request)).resolves.toEqual(expect.objectContaining({
            message: expect.anything(),
        }))
    })
});